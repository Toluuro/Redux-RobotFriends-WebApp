{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","Robotchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","UserRobotchange","IsPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","InitialStateSearch","InitialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.60370934.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src = {`https://robohash.org/${id}?200Ã—200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Components/Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n    \r\n    <div> \r\n        {\r\n        robots.map((user, i) => {\r\n        return (\r\n        <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}/>)\r\n    })\r\n         }\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default CardList; ","import React from 'react';\r\n\r\nconst SearchBox = ({Robotchange}) => {\r\n    return (\r\n\r\n        <div className='Pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' \r\n        type=\"search\" \r\n        placeholder=\"search robot\"\r\n        onChange={Robotchange} \r\n        />\r\n        </div>\r\n \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops, This is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry; ","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport '../Containers/App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions'\r\n\r\n\r\n// Tell me what piece of state i need to listen to.\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        IsPending: state.requestRobots.IsPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\n\r\n// Tell me what props i should listen to that are actions that need to get dispatched.\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        UserRobotchange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () =>dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n// START.\r\nclass App extends Component {\r\n    \r\n    componentDidMount() {\r\n    this.props.onRequestRobots()\r\n        \r\n    };\r\n    \r\n\r\n    render() {   \r\n        const { searchField, UserRobotchange, robots, IsPending } = this.props;\r\n        const filterRobots = robots.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return IsPending ?\r\n             <h1>LOADING...</h1> :\r\n             (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robot Friends</h1>\r\n                    <SearchBox Robotchange = {UserRobotchange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots = {filterRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n// END.","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n// import {REQUEST_ROBOTS_PENDING} from './constants.js';\r\n// import {REQUEST_ROBOTS_SUCCESS} from './constants.js';\r\n// import {REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\n\r\n\r\nexport  const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch ({type:REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then (data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch (error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst InitialStateSearch  = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state=InitialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign ({}, state, {searchField:action.payload});\r\n            default:\r\n                return state;\r\n    }\r\n} \r\n\r\nconst InitialStateRobots = {\r\n    IsPending:false,\r\n    robots:[],\r\n    error: ``\r\n}\r\n\r\nexport const requestRobots = (state=InitialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign ({}, state, {IsPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign ({}, state, {robots:action.payload, IsPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign ({}, state, {error:action.payload, IsPending: false}) \r\n            default:\r\n                return state;\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from '../src/Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons'\r\n\r\n \r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = \r\ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n// this is ordered, it is going to go through the thunkMiddleware then logger.\r\n\r\nReactDOM.render( \r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n "],"sourceRoot":""}